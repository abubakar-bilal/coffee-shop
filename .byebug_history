c
((discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity).to_f
(discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity
n
discount.discount_conditions.all? { |condition| condition_met?(condition) }
c
((discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity).to_f
n
discount.discount_conditions.all? { |condition| condition_met?(condition) }
c
n
discount.discount_conditions.all? { |condition| condition_met?(condition) }
discount.discount_conditions.count
c
(target_item.item.price_with_tax * target_item.quantity).to_f
target_item.item.price_with_tax * target_item.quantity.to_f
target_item.item.price_with_tax * target_item.quantity
((discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity).to_f
((discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity)
(discount.discount_rate / 100.0) * target_item.item.price_with_tax * target_item.quantity
discount.discount_rate.to_f
discount.discount_rate
n
discount.discount_conditions
discount
discount.discount_conditions.all? { |condition| condition_met?(condition) }
c
n
c
order_items
discount.discount_conditions.count
discount.discount_conditions
discount.discount_conditions.all? { |condition| condition_met?(condition) }
c
discount.discount_conditions.all? { |condition| condition_met?(condition) }
c
discount
n
c
discount
n
sub_total.to_f
sub_total
n
c
order_items
order_items.includes(:item)
sub_total
n
order_items.length
order_items.count
order_items
c
ord.update(status: 'processing')
ord
ord = Order.last
Order.last.total.to_f
Order.last.total
Order.last
OrderItem.count
order_items
c
params[:order][:order_items]
params[:order]
params
order_params
c
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base)).first
JWT.decode(request.headers['Authorization'].split(' ').second,Rails.application.credentials.fetch(:secret_key_base)).first
n
c
n
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base))
request.headers['Authorization'].split(' ').second
Rails.application.credentials.fetch(:secret_key_base)
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base))
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base)
request.headers['Authorization'].split(' ').second
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base)
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base).first
JWT.decode(request.headers['Authorization'].split(' ').second, Rails.application.credentials.fetch(:secret_key_base)).first
jwt_payload
n
request.headers['Authorization']
request.headers['Authorization'].present?
request.headers
